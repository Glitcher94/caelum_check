// Mocks generated by Mockito 5.4.5 from annotations
// in caelum/test/presentation/blocs/weather/weather_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:caelum/core/errors/failures.dart' as _i6;
import 'package:caelum/domain/entities/forecast.dart' as _i7;
import 'package:caelum/domain/entities/location.dart' as _i8;
import 'package:caelum/domain/repositories/weather_repository.dart' as _i2;
import 'package:caelum/domain/usecases/get_forecast.dart' as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeatherRepository_0 extends _i1.SmartFake
    implements _i2.WeatherRepository {
  _FakeWeatherRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetForecast].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetForecast extends _i1.Mock implements _i4.GetForecast {
  MockGetForecast() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WeatherRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWeatherRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WeatherRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Forecast>> execute(
    _i8.Location? location,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [location]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.Forecast>>.value(
                  _FakeEither_1<_i6.Failure, _i7.Forecast>(
                    this,
                    Invocation.method(#execute, [location]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Forecast>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Forecast>> executeByCity(
    String? city,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#executeByCity, [city]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.Forecast>>.value(
                  _FakeEither_1<_i6.Failure, _i7.Forecast>(
                    this,
                    Invocation.method(#executeByCity, [city]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Forecast>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Forecast>>
  executeByCurrentLocation() =>
      (super.noSuchMethod(
            Invocation.method(#executeByCurrentLocation, []),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.Forecast>>.value(
                  _FakeEither_1<_i6.Failure, _i7.Forecast>(
                    this,
                    Invocation.method(#executeByCurrentLocation, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Forecast>>);
}
